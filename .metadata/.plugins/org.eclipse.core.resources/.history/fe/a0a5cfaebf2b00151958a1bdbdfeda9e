# -*- coding: utf-8 -*-
'''
Created on 26 May 2015

@author: sduprey
'''

from __future__ import print_function

import psycopg2

import logging
import numpy as np
from optparse import OptionParser
import sys
from time import time
import re

from scipy import sparse

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.feature_extraction.text import HashingVectorizer

def size_mb(docs):
    return sum(len(s) for s in docs) / 1e6

def save_sparse_csr(filename,array):
    np.savez(filename,data = array.data ,indices=array.indices,
             indptr =array.indptr, shape=array.shape )

def save_output(filename,vector):
    np.savez(filename,data =vector)

def load_sparse_csr(filename):
    loader = np.load(filename)
    return sparse.csr_matrix((  loader['data'], loader['indices'], loader['indptr']),
                         shape = loader['shape'])
    
# Display progress logs on stdout
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s %(levelname)s %(message)s')

# parse commandline arguments
op = OptionParser()
op.add_option("--report",
              action="store_true", dest="print_report",
              help="Print a detailed classification report.")
op.add_option("--chi2_select",
              action="store", type="int", dest="select_chi2",
              help="Select some number of features using a chi-squared test")
op.add_option("--confusion_matrix",
              action="store_true", dest="print_cm",
              help="Print the confusion matrix.")
op.add_option("--top10",
              action="store_true", dest="print_top10",
              help="Print ten most discriminative terms per class"
                   " for every classifier.")
op.add_option("--all_categories",
              action="store_true", dest="all_categories",
              help="Whether to use all categories or not.")
op.add_option("--use_hashing",
              action="store_true",
              help="Use a hashing vectorizer.")
op.add_option("--n_features",
              action="store", type=int, default=2 ** 16,
              help="n_features when using the hashing vectorizer.")
op.add_option("--filtered",
              action="store_true",
              help="Remove newsgroup information that is easily overfit: "
                   "headers, signatures, and quoting.")

(opts, args) = op.parse_args()
if len(args) > 0:
    op.error("this script takes no arguments.")
    sys.exit(1)

print(__doc__)
op.print_help()
print()

conn_string = "host='localhost' dbname='CATEGORIZERDB' user='postgres' password='mogette'"
# print the connection string we will use to connect
 
# get a connection, if a connect cannot be made an exception will be raised here
conn = psycopg2.connect(conn_string)
conn.autocommit = True
# conn.cursor will return a cursor object, you can use this cursor to perform queries
cursor = conn.cursor()

print("Loading cleaned samples for training... ")
sql_training_data_request = 'select IDENTIFIANT_PRODUIT, CATEGORIE_3, DESCRIPTION, LIBELLE, MARQUE from UNIFORMLY_RESTRAINED_TRAINING_DATA'

cursor.execute(sql_training_data_request); 
 # retrieve the records from the database
fetched_training_data = cursor.fetchall()

training_identifiant_produit_list = [item[0] for item in fetched_training_data];
training_outputs  = [item[1] for item in fetched_training_data];
training_documents  = [item[2] + ' '+item[3] for item in fetched_training_data];

data_train_target=training_outputs
# parsing all the stop words
stopwordsSet = re.findall('[\\wàáâãäçèéêëœìíîïñòóôõöùúûüÿÁÀÂÄÈÉÊËÎÏÔŒÙÛÜŸÇŒ]+', file('/home/sduprey/My_Data/My_Semantics_Data/stopwords_fr.txt').read().lower()) 
stopwordsSet = [ unicode(word, "utf-8") for word in stopwordsSet]

data_train_data=[]
print("Cleaning and parsing the training set...\n")
#for i in xrange( 0, len(training_documents)):
counter=1
for training_doc in training_documents:
    print(' Cleaning Training Row '+str(counter))
    counter=counter+1
    wordList = re.findall('[\\wàáâãäçèéêëœìíîïñòóôõöùúûüÿÁÀÂÄÈÉÊËÎÏÔŒÙÛÜŸÇŒ]+', unicode(training_doc.lower(), "utf-8")) 
    filtered_words = [w for w in wordList if not w in stopwordsSet]
    sentence_to_add = " ".join(wordList)
    data_train_data.append(sentence_to_add)


data_train_size_mb = size_mb(data_train_data)

print("%d documents - %0.3fMB (training set)" % (
    len(data_train_data), data_train_size_mb))


# split a training set and a test set
y_train = data_train_target


print("Extracting features from the training data using a sparse vectorizer")
t0 = time()
opts.use_hashing=False
if opts.use_hashing:
    # old version :vectorizer = HashingVectorizer(stop_words=stopwordsSet, non_negative=True, n_features=opts.n_features)   
    vectorizer = HashingVectorizer(analyzer = "word",tokenizer = None,preprocessor = None,stop_words = None)
    X_train = vectorizer.transform(data_train_data)
else:
    vectorizer = TfidfVectorizer(sublinear_tf=True, max_df=0.5,
                                 stop_words=None)
    X_train = vectorizer.fit_transform(data_train_data)
duration = time() - t0
print("done in %fs at %0.3fMB/s" % (duration, data_train_size_mb / duration))
print("n_samples: %d, n_features: %d" % X_train.shape)

print("saving the tf/idf matrix for our training data")

my_saving_training_matrix_file = '/home/sduprey/My_Data/My_Cdiscount_Challenge/whole_tfidf_restrained_data_training_matrix.bin'
print("saving to "+my_saving_training_matrix_file)
print(Xtrain.shape[0])
save_sparse_csr(my_saving_training_matrix_file,X_train)

my_saving_training_outputvector_file = '/home/sduprey/My_Data/My_Cdiscount_Challenge/whole_tfidf_restrained_data_training_output_vector.bin'
print("saving to "+my_saving_training_outputvector_file)
save_output(my_saving_training_outputvector_file,y_train)


print("Loading all testing... ")

sql_testing_data_request = 'select identifiant_produit, description, libelle, marque, prix from TESTING_DATA'
cursor.execute(sql_testing_data_request); 
 # retrieve the records from the database
fetched_testing_data = cursor.fetchall()
testing_identifiant_produit_list = [item[0] for item in fetched_testing_data];
testing_documents  = [item[1] + ' '+item[2] for item in fetched_testing_data];

print("Predicting the labels of the test set...")
print("%d documents" % len(testing_documents))
data_test_data=[]
print("Cleaning and parsing the training set...\n")
#for i in xrange( 0, len(training_documents)):
counter=1
for testing_doc in testing_documents:
    print(' Cleaning Testing Row '+str(counter))
    counter=counter+1
    wordList = re.findall('[\\wàáâãäçèéêëœìíîïñòóôõöùúûüÿÁÀÂÄÈÉÊËÎÏÔŒÙÛÜŸÇŒ]+', unicode(testing_doc.lower(), "utf-8")) 
    filtered_words = [w for w in wordList if not w in stopwordsSet]
    sentence_to_add = " ".join(wordList)
    data_test_data.append(sentence_to_add)

data_test_size_mb = size_mb(data_test_data)
print("%d documents - %0.3fMB (test set)" % (
    len(data_test_data), data_test_size_mb))

print("Extracting features from the test data using the same vectorizer")
t0 = time()
X_test = vectorizer.transform(data_test_data)
my_saving_testing_matrix_file = '/home/sduprey/My_Data/My_Cdiscount_Challenge/whole_tfidf_restrained_data_testing_matrix.bin'
save_sparse_csr(my_saving_testing_matrix_file,X_test)